---

# Local Actions
# =============

# Create a timestamp and register is as a variable we can use to make directories etc.
- name: Get release timestamp
  local_action: command date +%Y%m%d%H%M%S
  register: timestamp

# Set Release Folder
- include: ../../common/tasks/setup_release_folders.yaml folder={{ timestamp.stdout }}


# Create a local dir...
- name: Create .tmp/timestamp directory for release
  local_action: file state=directory recurse=yes path=.tmp/{{ timestamp.stdout }}

# ... and get the latest git release from the specified build branch (e.g., develop/master) - and only latest revision
- name: "Pull latest from git"
  local_action: git repo={{ build_repo_src }} dest=.tmp/{{ timestamp.stdout }} version={{ build_branch }} accept_hostkey=yes depth=1

# Server
# ======
  
# COPY THE RELEASE ACROSS
#########################

# rsync release to server. Can exclude directories at this point if that's simpler than deleting from tmp firs. 
- name: Push release to server
  synchronize: mode=push src=.tmp/{{ timestamp.stdout }} dest={{ app_dir }}/releases rsync_opts=--exclude=.git


# COMPILE JS/CSS FROM SRC
#########################

# Update node packages
- name: "Update node packages"
  npm: path={{ release_folder }} state=latest

# Compile with gulp.
- name: "Compile the release with Gulp"
  command: gulp build chdir={{ release_folder }}


